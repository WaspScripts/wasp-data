const
  RESET = False;
  PATH = {$MACRO DIR};
  HASH_LENGTH = 6;

type
  TItemData = record
    ItemID: Int32;
    BorderHash: String;
    ItemHash: String;
  end;

  TItemDataArray = array of TItemData;

function CompareItemData(constref a, b: TItemData): Integer;
begin
  Result := a.ItemID - b.ItemID;
end;

procedure PrepareResources(out files: TStringArray);
begin
  if RESET and DirExists(PATH + 'images') then
  begin
    WriteLn('Resetting resources.');
    DirDelete(PATH + 'images', False);
    DirDelete(PATH + 'masks', False);
  end;

  FileDelete(PATH + 'data' + PATH_SEP + 'hash');
  FileDelete(PATH + 'masks.zip');

  files := DirList(PATH + 'images', True);
  if files = [] then
  begin
    WriteLn('Extracting item images.');
    if not ZipExtract(PATH + 'images.zip', PATH + 'images') then
      raise 'Failed to unzip files.';
    files := DirList(PATH + 'images', True);
  end;

  DirCreate(PATH + 'masks');

  WriteLn('Preparation done.');
end;

var
  ITEM_DATA_ARRAY: TItemDataArray;
  UNIQUE_ITEM_DATA_ARRAY: TStringArray;
  UNIQUE_BORDER_DATA_ARRAY: TStringArray;
  ZIP_LIST: TStringArray;

function ProcessItemImage(filename: String): TItemData;
var
  img, border, mask: TImage;
  tpa: TPointArray;
begin
  img := new TImage(filename);
  img.FillWithAlpha($FF);        //ensure there's no weird alphas.
  img.ReplaceColor($202030, $0); //remove the item shadow

  //find border minus stack number space
  tpa := img.FindColor($010000, 0, [0, 9, 35, 31]);

  img.DrawColor := $0;
  img.DrawBoxFilled([0,0,35,8]);

  border := new TImage(36, 32);
  border.DrawColor := $FFFFFF;
  border.DrawTPA(tpa);

  Result.ItemID     := PathExtractNameWithoutExt(filename).ExtractInteger();
  Result.BorderHash := HashData(EHashAlgo.MD5, border.Data, 4608).CopyRange(0, HASH_LENGTH); //h * w * 4 = 4608
  Result.ItemHash   := HashData(EHashAlgo.MD5, img.Data, 4608).CopyRange(0, HASH_LENGTH);

  ITEM_DATA_ARRAY += Result;

  if not UNIQUE_ITEM_DATA_ARRAY.Contains(Result.ItemHash) then
    UNIQUE_ITEM_DATA_ARRAY += Result.ItemHash;

  if UNIQUE_BORDER_DATA_ARRAY.Contains(Result.BorderHash) then
    Exit;

  UNIQUE_BORDER_DATA_ARRAY += Result.BorderHash;

  mask := new TImage(36, 32);
  mask.DrawColor := $FFFFFF;
  mask.DrawTPA(img.FindColor($0, 0, [0, 9, 35, 31]).Invert());

  ZIP_LIST += PATH + 'masks' + PATH_SEP + Result.BorderHash + '.png';
  mask.Save(PATH + 'masks' + PATH_SEP + Result.BorderHash + '.png', True);
end;

procedure WriteFiles();
var
  itemData: TItemData;
begin
  for itemData in ITEM_DATA_ARRAY do
    FileAppend(PATH + 'data' + PATH_SEP + 'hash', itemData.ItemHash + LINE_SEP);

  ZipFiles(PATH + 'masks.zip', ZIP_LIST);

  if RESET then
  begin
    DirDelete(PATH + 'images', False);
    DirDelete(PATH + 'masks', False);
  end;
end;

var
  files: TStringArray;
  filename: String;
begin
  PrepareResources(files);

  for filename in files do
    ProcessItemImage(filename);

  WriteLn('Total items: ', Length(ITEM_DATA_ARRAY));
  WriteLn('Total unique items: ', Length(UNIQUE_ITEM_DATA_ARRAY));
  WriteLn('Total unique borders: ', Length(UNIQUE_BORDER_DATA_ARRAY));

  WriteLn('Sorting data.');
  ITEM_DATA_ARRAY.Sort(@CompareItemData);
  WriteLn ITEM_DATA_ARRAY;
  WriteLn('Saving files.');
  WriteFiles();
end.
